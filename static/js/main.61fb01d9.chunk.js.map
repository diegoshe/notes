{"version":3,"sources":["context/alert/alertContext.js","context/firebase/fireBaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","Home.js","About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/firebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNamess","timeout","title","date","slice","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","classNames","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","tupe","a","axi","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61fb01d9.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AlertContext = createContext()","import {createContext} from 'react'\r\n\r\nexport const FirebaseContext = createContext()","import React, {useState, useContext} from 'react';\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\nimport {FirebaseContext} from \"../context/firebase/fireBaseContext\";\r\n\r\nexport  const Form = () => {\r\n\tconst  [value, setValue] = useState('')\r\n\tconst alert = useContext(AlertContext)\r\n\tconst firebase = useContext(FirebaseContext)\r\n\r\n\tconst submitHandler = event => {\r\n\t\tevent.preventDefault()\r\n\r\n\t\tif (value.trim()) {\r\n\t\t\tfirebase.addNote(value.trim()).then(() => {\r\n\t\t\t\talert.show('Заметка была создана', 'success')\r\n\t\t\t}).catch(() => {\r\n\t\t\t\talert.show('Что-то пошло не так', 'danger')\r\n\t\t\t})\r\n\t\t\tsetValue('')\r\n\t\t} else {\r\n\t\t\talert.show('Введите название заметки')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={submitHandler}>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<input type=\"text\" className=\"form-control\"\r\n\t\t\t\t       placeholder=\"Введите название заметки\"\r\n\t\t\t\t       value={value}\r\n\t\t\t\t       onChange={e => setValue(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\n\r\nexport const Notes = ({notes, onRemove}) => (\r\n\t<TransitionGroup component=\"ul\" className=\"list-group\">\r\n\t\t{notes.map(note => (\r\n\t\t\t<CSSTransition\r\n\t\t\t\tkey={note.id}\r\n\t\t\t\tclassNamess={'note'}\r\n\t\t\t\ttimeout={800}\r\n\t\t\t>\r\n\t\t\t\t<li key={note.id} className=\"list-group-item note\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<strong>{note.title}</strong>\r\n\t\t\t\t\t\t<small>{note.date.slice(0, -5)}</small>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button type=\"button\"\r\n\t\t\t\t\t        className=\"btn btn-outline-danger btn-sm\"\r\n\t\t\t\t\t        onClick={() => onRemove(note.id)}\r\n\t\t\t\t\t>&times;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t</CSSTransition>\r\n\t\t))}\r\n\t</TransitionGroup>\r\n)\r\n","import React from 'react'\r\n\r\nexport  const Loader = () => {\r\n\treturn (\r\n\t\t<div className=\"spinner-border\" role=\"status\">\r\n\t\t\t<span className=\"sr-only\">Loading...</span>\r\n\t\t</div>\r\n\t)\r\n}","import React, {Fragment, useContext, useEffect} from 'react';\r\nimport {Form} from \"./components/Form\";\r\nimport {Notes} from \"./components/Notes\";\r\nimport {FirebaseContext} from \"./context/firebase/fireBaseContext\";\r\nimport {Loader} from \"./components/Loader\";\r\n\r\nexport  const Home = () => {\r\n\tconst {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchNotes()\r\n\t\t// eslint-disable-next-line\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Form />\r\n\t\t\t<hr/>\r\n\t\t\t{loading\r\n\t\t\t\t? <Loader />\r\n\t\t\t\t: <Notes notes={notes} onRemove={removeNote}/>\r\n\t\t\t}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n","import React, {Fragment} from 'react';\r\n\r\nexport  const About = () => (\r\n\t<div className=\"jumbotron\">\r\n\t\t<div className=\"container\">\r\n\t\t\t<h1 className=\"display-4\">Записывай, не забывай...</h1>\r\n\t\t\t<p className=\"lead\">Привычка записывать – главный секрет хорошей памяти.</p>\r\n\t\t</div>\r\n\t</div>\r\n)\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport  const Navbar = () => (\r\n\t<nav className='navbar navbar-dark navbar-expand-lg bg-primary'>\r\n\t\t<div className=\"navbar-brand\">\r\n\t\t\tNote App\r\n\t\t</div>\r\n\t\t<ul className=\"navbar-nav\">\r\n\t\t\t<li className=\"nav-item \">\r\n\t\t\t\t<NavLink className=\"nav-link\" to=\"/\" exact>Главная</NavLink>\r\n\t\t\t</li>\r\n\t\t\t<li className=\"nav-item \">\r\n\t\t\t\t<NavLink className=\"nav-link\" to=\"/about\">Информация</NavLink>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</nav>\r\n)\r\n","import React, {useContext} from 'react';\r\nimport {CSSTransition} from 'react-transition-group'\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\n\r\nexport  const Alert = () => {\r\n\tconst  {alert, hide} = useContext(AlertContext)\r\n\r\n\treturn (\r\n\t\t<CSSTransition\r\n\t\t\tin={alert.visible}\r\n\t\t\ttimeout={{\r\n\t\t\t\tenter: 500,\r\n\t\t\t\texit: 350\r\n\t\t\t}}\r\n\t\t\tclassNames={'alert'}\r\n\t\t\tmountOnEnter\r\n\t\t\tunmountOnExit\r\n\t\t>\r\n\t\t<div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n\t\t\t<strong>Внимание !</strong>\r\n\t\t\t&nbsp;{alert.text}\r\n\t\t\t<button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n\t\t\t\t<span aria-hidden=\"true\">&times;</span>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t</CSSTransition >\r\n\t)\r\n}\r\n","import {HIDE_ALERT, SHOW_ALERT} from \"../types\";\r\n\r\nconst handlers = {\r\n\t[SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n\t[HIDE_ALERT]: state => ({...state, visible: false}),\r\n\tDEFAULT: state => state\r\n}\r\n\r\n\r\nexport const alertReducer = (state, action) => {\r\n\tconst handle = handlers[action.type] || handlers.DEFAULT\r\n\treturn handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\n\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n\r\n\r\n","import React, {useReducer} from 'react';\r\nimport {AlertContext} from './alertContext';\r\nimport {alertReducer} from \"./alertReducer\";\r\nimport {HIDE_ALERT, SHOW_ALERT} from \"../types\";\r\n\r\nexport const AlertState = ({children}) => {\r\n\tconst [state, dispatch] = useReducer(alertReducer, {visible: false})\r\n\r\n\tconst show = (text, type = 'warning') => {\r\n\t\tdispatch({\r\n\t\t\ttype: SHOW_ALERT,\r\n\t\t\tpayload: {text, type}\r\n\t\t})\r\n\t}\r\n\r\n\tconst hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n\treturn (\r\n\t\t<AlertContext.Provider value={{\r\n\t\t\tshow, hide,\r\n\t\t\talert: state\r\n\t\t}}>\r\n\t\t\t{children}\r\n\t\t</AlertContext.Provider>\r\n\t)\r\n}","import {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from \"../types\";\r\n\r\nconst handlers = {\r\n\t[SHOW_LOADER]: state => ({...state, loading: true}),\r\n\t[ADD_NOTE]: (state, {payload}) => ({\r\n\t\t...state,\r\n\t\tnotes: [...state.notes, payload]\r\n\t}),\r\n\t[FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\r\n\t[REMOVE_NOTE]: (state, {payload}) => ({\r\n\t\t...state,\r\n\t\tnotes: state.notes.filter(note => note.id !== payload)\r\n\t}),\r\n\tDEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n\tconst handle = handlers[action.type] || handlers.DEFAULT\r\n\treturn handle(state, action)\r\n}","import React, {useReducer} from 'react'\r\nimport axi from 'axios'\r\nimport {FirebaseContext} from \"./fireBaseContext\";\r\nimport {firebaseReducer} from \"./firebaseReducer\";\r\nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from \"../types\";\r\n\r\nconst url = process.env.REACT_APP_DB_URL\r\n\r\nexport const FirebaseState = ({children}) => {\r\n\tconst initialState = {\r\n\t\tnotes: [],\r\n\t\tloading: false\r\n\t}\r\n\tconst [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n\tconst showLoader = () => dispatch({tupe: SHOW_LOADER})\r\n\r\n\tconst fetchNotes = async () => {\r\n\t\tshowLoader()\r\n\t\tconst res = await axi.get(`${url}/notes.json`)\r\n\t\tconst payload = Object.keys(res.data || []).map(key => {\r\n\t\t\treturn {\r\n\t\t\t\t...res.data[key],\r\n\t\t\t\tid: key\r\n\t\t\t}\r\n\t\t})\r\n\t\tdispatch({type: FETCH_NOTES, payload})\r\n\t}\r\n\r\n\tconst addNote = async title => {\r\n\t\tconst note = {\r\n\t\t\ttitle, date: new Date().toJSON()\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst res = await axi.post(`${url}/notes.json`, note)\r\n\t\t\tconst payload = {\r\n\t\t\t\t...note, id: res.data.name\r\n\t\t\t}\r\n\t\t\tdispatch({type: ADD_NOTE, payload})\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e.message)\r\n\t\t}\r\n\t}\r\n\r\n\tconst removeNote = async  id => {\r\n\t\tawait axi.delete(`${url}/notes/${id}.json`)\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_NOTE,\r\n\t\t\tpayload: id\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FirebaseContext.Provider value={{\r\n\t\t\tshowLoader, addNote, removeNote, fetchNotes,\r\n\t\t\tloading: state.loading,\r\n\t\t\tnotes: state.notes\r\n\t\t}}>\r\n\t\t\t{children}\r\n\t\t</FirebaseContext.Provider>\r\n\t)\r\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport {Home} from \"./Home\";\nimport {About} from \"./About\";\nimport {Navbar} from \"./components/Navbar\";\nimport {Alert} from \"./components/Alert\";\nimport {AlertState} from \"./context/alert/AlertState\";\nimport {FirebaseState} from \"./context/firebase/firebaseState\";\n\nfunction App() {\n\treturn (\n\t\t<FirebaseState>\n\t\t\t<AlertState>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<Navbar/>\n\t\t\t\t\t<div className=\"container pt-4\">\n\t\t\t\t\t\t<Alert/>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path={'/'} exact component={Home}/>\n\t\t\t\t\t\t\t<Route path={'/about'} component={About}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</BrowserRouter>\n\t\t\t</AlertState>\n\t\t</FirebaseState>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}